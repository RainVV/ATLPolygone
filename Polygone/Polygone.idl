// Polygone.idl : IDL source for Polygone
//

// This file will be processed by the MIDL tool to
// produce the type library (Polygone.tlb) and marshalling code.

#include "olectl.h"
import "oaidl.idl";
import "ocidl.idl";

[
	object,
	uuid(a817e7a2-43fa-11d0-9e44-00aa00b6770a),
	dual,	
	pointer_default(unique)
]
interface IComponentRegistrar : IDispatch
{
	[id(1)]	HRESULT Attach([in] BSTR bstrPath);
	[id(2)]	HRESULT RegisterAll();
	[id(3)]	HRESULT UnregisterAll();
	[id(4)]	HRESULT GetComponents([out] SAFEARRAY(BSTR)* pbstrCLSIDs, [out] SAFEARRAY(BSTR)* pbstrDescriptions);
	[id(5)]	HRESULT RegisterComponent([in] BSTR bstrCLSID);
	[id(6)] HRESULT UnregisterComponent([in] BSTR bstrCLSID);
};

[
	object,
	uuid(A4B79B26-1493-421A-BC65-5C6963B05A9C),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IPolyCtl : IDispatch{
	[propput, bindable, requestedit, id(DISPID_FILLCOLOR)]
	HRESULT FillColor([in]OLE_COLOR clr);
	[propget, bindable, requestedit, id(DISPID_FILLCOLOR)]
	HRESULT FillColor([out, retval]OLE_COLOR* pclr);
};

[
	uuid(2BC42024-4A77-4413-BB1E-03E6068968F7),
	version(1.0),
	custom(a817e7a1-43fa-11d0-9e44-00aa00b6770a,"{0E0BB131-A415-4230-B75F-13C0D6E8C71B}")
]
library PolygoneLib
{
	importlib("stdole2.tlb");
	[
		uuid(0E0BB131-A415-4230-B75F-13C0D6E8C71B)		
	]
	coclass CompReg
	{
		[default] interface IComponentRegistrar;
	};
	[
		uuid(4518D3C0-807F-4F57-8238-32FE3467BF3F)		
	]
	dispinterface _IPolyCtlEvents
	{
		properties:
		methods:
	};
	[
		uuid(5889E83B-D7EC-456D-8FA9-F7ED1E3FCFDB),		
		control
	]
	coclass PolyCtl
	{
		[default] interface IPolyCtl;
		[default, source] dispinterface _IPolyCtlEvents;
	};
};

